const _ = require('lodash')
const cssMatcher = require('jest-matcher-css')
const postcss = require('postcss')
const tailwindcss = require('tailwindcss')

/**
 * generatePluginCss
 * Handles generating base tailwind css
 * @param {*} config
 * @param {object} pluginOptions are the options passed to the plugin
 * @return
 */
const generatePluginCss = (config, pluginOptions = {}) => {
  return postcss(
    tailwindcss(
      _.merge(
        {
          theme: {
            extend: {
              color: {}
            }
          },
          variants: [],
          plugins: [require('./index.js')(pluginOptions)],
        },
        config
      )
    )
  )
    .process('@tailwind components; @tailwind utilities', {
      from: undefined,
    })
    .then((result) => {
      // console.log('results', result.css)
      return result.css
    })
}

/**
 * Base display classes from TailwindCSS
 * Note: I can't figure out how to get around these. If display
 *       is not added above to corePlugins, nothing shows up
 */
const baseCss = `
`

expect.extend({
  toMatchCss: cssMatcher,
})

test('color are generated by default', () => {
  return generatePluginCss(null, { }).then((css) => {
    expect(css).toMatch(/(clrs-navy)/)
  })
})

test('variant colors can be generated', () => {
  return generatePluginCss(null, { variants: ['a50'] }).then((css) => {
    expect(css).toMatch(/(clrs-navy-a50)/)
  })
})

test('extra colors can be generated', () => {
  return generatePluginCss(null, { extras: ['white'] }).then((css) => {
    expect(css).toMatch(/(clrs-white)/)
  })
})

test('base colors can be generated', () => {
  return generatePluginCss(null, { names: ['funky'] }).then((css) => {
    expect(css).toMatch(/(clrs-funky)/)
  })
})

test('variants can skip colors', () => {
  return generatePluginCss(null, { names: ['white'], skip: [ 'white' ], variants: ['a50'] }).then((css) => {
    expect(css).toMatch(/(clrs-white)/)
    expect(css).not.toMatch(/(clrs-white-a50)/)
  })
})

test('prefix can be changed', () => {
  return generatePluginCss(null, { prefix: 'ds1' }).then((css) => {
    expect(css).toMatch(/(ds1-navy)/)
  })
})

test('try it all at once', () => {
  return generatePluginCss(null, {
    prefix: 'ds1',
    names: ['primary'],
    extras: ['secondary'],
    skip: ['secondary'],
    variants: ['light', 'dark']
  }).then((css) => {
    expect(css).toMatch(/(ds1-primary)/)
    expect(css).toMatch(/(ds1-secondary)/)
    expect(css).toMatch(/(ds1-primary-light)/)
    expect(css).toMatch(/(ds1-primary-dark)/)
    expect(css).not.toMatch(/(ds1-secondary-light)/)
    expect(css).not.toMatch(/(ds1-secondary-dark)/)
  })
})


