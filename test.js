const _ = require('lodash')
const postcss = require('postcss')
const tailwindcss = require('tailwindcss')

/**
 * generatePluginCss
 * Handles generating base tailwind css
 * @param {*} config
 * @param {object} pluginOptions are the options passed to the plugin
 * @return
 */
const generatePluginCss = (config, pluginOptions = {}) => {
  return postcss(
    tailwindcss(
      _.merge(
        {
          theme: {
            extend: {
              color: {},
            },
          },
          variants: [],
          plugins: [require('./index.js')(pluginOptions)],
        },
        config
      )
    )
  )
    .process('@tailwind components; @tailwind utilities', {
      from: undefined,
    })
    .then((result) => {
      // console.log('results', result.css)
      return result.css
    })
}

const debugClrs = (css) => {
  const vars = css.match(/var\(--clrs-[a-z]*[1-9]*(-a[0-9]*)?(, #[a-f]*[0-9]*)?\)/g)
  console.log(vars)
}

const debugDs1 = (css) => {
  const vars = css.match(/var\(--ds1-[a-z]*[1-9]*(-a[0-9]*)?(-(?:light|dark))?(, #[a-f]*[0-9]*)?\)/g)
  console.log(vars)
}

test('color are generated by default', () => {
  return generatePluginCss(null, {}).then((css) => {
    // debugClrs(css)
    const total = css.match(/--clrs-[a-z]*[1-9]*/g)
    const tags = Array.from(new Set(total))
    const list = css.match(/\.[a-z]*-clrs-[a-z]*[1-9]*/g)

    expect(tags).toEqual(expect.arrayContaining(['--clrs-navy']))
    expect(tags.length).toEqual(16)

    expect(list).toEqual(expect.arrayContaining(['.text-clrs-navy']))
    expect(list.length).toEqual(144)
  })
})

test('variant colors can be generated', () => {
  return generatePluginCss(null, { variants: ['a50'] }).then((css) => {
    // debugClrs(css)
    const total = css.match(/--clrs-[a-z]*[1-9]*(-a50)/g)
    const tags = Array.from(new Set(total))
    const list = css.match(/\.[a-z]*-clrs-[a-z]*[1-9]*(-a50)/g)
    const results = ['--clrs-navy-a50', '--clrs-red-a50']

    expect(tags).toEqual(expect.arrayContaining(results))
    expect(tags.length).toEqual(16)

    expect(list).toEqual(expect.arrayContaining(['.text-clrs-navy-a50']))
    expect(list.length).toEqual(144)
  })
})

test('extra colors can be generated', () => {
  return generatePluginCss(null, { extras: ['white'] }).then((css) => {
    // debugClrs(css)
    const total = css.match(/--clrs-[a-z]*[1-9]*/g)
    const tags = Array.from(new Set(total))
    const list = css.match(/\.[a-z]*-clrs-[a-z]*[1-9]*/g)
    const results = ['--clrs-navy', '--clrs-white']

    expect(tags).toEqual(expect.arrayContaining(results))
    expect(tags.length).toEqual(17)

    expect(list).toEqual(expect.arrayContaining(['.text-clrs-white']))
    expect(list.length).toEqual(153)
  })
})

test('base colors can be generated', () => {
  return generatePluginCss(null, { names: ['funky'] }).then((css) => {
    // debugClrs(css)
    const total = css.match(/--clrs-[a-z]*[1-9]*/g)
    const tags = Array.from(new Set(total))
    const list = css.match(/\.[a-z]*-clrs-[a-z]*[1-9]*/g)
    const results = ['--clrs-funky']

    expect(tags).toEqual(expect.arrayContaining(results))
    expect(tags.length).toEqual(1)

    expect(list).toEqual(expect.arrayContaining(['.text-clrs-funky']))
    expect(list.length).toEqual(9)
  })
})

test('variants can skip colors', () => {
  return generatePluginCss(null, {
    names: ['white'],
    skip: ['white'],
    variants: ['a50'],
  }).then((css) => {
    // debugClrs(css)
    const total = css.match(/--clrs-[a-z]*[1-9]*(-a50)?/g)
    const tags = Array.from(new Set(total))
    const list = css.match(/\.[a-z]*-clrs-[a-z]*[1-9]*(-a50)?/g)
    const results = ['--clrs-white']

    expect(tags).toEqual(expect.arrayContaining(results))
    expect(tags.length).toEqual(1)

    expect(list).toEqual(expect.arrayContaining(['.text-clrs-white']))
    expect(list.length).toEqual(9)
  })
})

test('prefix can be changed', () => {
  return generatePluginCss(null, { prefix: 'ds1' }).then((css) => {
    // debugDs1(css)
    const total = css.match(/--ds1-[a-z]*[1-9]*(-a50)?/g)
    const tags = Array.from(new Set(total))
    const list = css.match(/\.[a-z]*-ds1-[a-z]*[1-9]*(-a50)?/g)
    const results = ['--ds1-navy', '--ds1-red']

    expect(tags).toEqual(expect.arrayContaining(results))
    expect(tags.length).toEqual(16)

    expect(list).toEqual(expect.arrayContaining(['.text-ds1-navy']))
    expect(list.length).toEqual(144)
  })
})

test('try it all at once', () => {
  return generatePluginCss(null, {
    prefix: 'ds1',
    names: ['primary'],
    extras: ['secondary'],
    skip: ['secondary'],
    variants: ['light', 'dark'],
  }).then((css) => {
    // debugDs1(css)
    const total = css.match(/--ds1-[a-z]*[1-9]*(-(?:light|dark))?/g)
    const tags = Array.from(new Set(total))
    const list = css.match(/\.[a-z]*-ds1-[a-z]*[1-9]*(-(?:light|dark))?/g)
    const results = [
      '--ds1-primary',
      '--ds1-secondary',
      '--ds1-primary-light',
      '--ds1-primary-dark',
    ]

    expect(tags).toEqual(expect.arrayContaining(results))
    expect(tags.length).toEqual(4)

    expect(list).toEqual(expect.arrayContaining(['.text-ds1-primary-light']))
    expect(list.length).toEqual(36)
  })
})

test('map can define vars and default colors', () => {
  return generatePluginCss(null, {
    prefix: 'ds1',
    map: {
      primary: '#ff0000',
    },
  }).then((css) => {
    // debugDs1(css)
    const total = css.match(/--ds1-[a-z]*[1-9]*/g)
    const tags = Array.from(new Set(total))
    const list = css.match(/\.[a-z]*-ds1-[a-z]*[1-9]*/g)
    const results = ['--ds1-primary']

    expect(tags).toEqual(expect.arrayContaining(results))
    expect(tags.length).toEqual(1)

    expect(list).toEqual(expect.arrayContaining(['.text-ds1-primary']))
    expect(list.length).toEqual(9)
  })
})

test('map can define vars and default colors with alphas', () => {
  return generatePluginCss(null, {
    map: {
      bada55: '#bada55',
      slate: '#708090',
      slate4: '#4e5964',
      white: '#ffffff',
    },
    alphas: [50],
  }).then((css) => {
    // debugClrs(css)
    const total = css.match(/--clrs-[a-z]*[1-9]*(-(?:a50))?/g)
    const tags = Array.from(new Set(total))
    const list = css.match(/\.[a-z]*-clrs-[a-z]*[1-9]*(-(?:a50))?/g)
    const results = ['--clrs-navy', '--clrs-bada55', '--clrs-bada55-a50']

    expect(tags).toEqual(expect.arrayContaining(results))
    expect(tags.length).toEqual(40)

    expect(list).toEqual(
      expect.arrayContaining(['.text-clrs-red-a50', '.text-clrs-bada55', '.text-clrs-bada55-a50'])
    )
    expect(list.length).toEqual(360)
  })
})
