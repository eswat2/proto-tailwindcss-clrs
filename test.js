const postcss = require('postcss')
const tailwindcss = require('@tailwindcss/postcss')

/**
 * generatePluginCss
 * Handles generating base tailwind css
 * @param {*} config
 * @param {object} pluginOptions are the options passed to the plugin
 * @return
 */
const generatePluginCss = (safelist = [], pluginOptions = {}, callback) => {
  return postcss(
    tailwindcss({
      safelist,
      plugins: [require('./index.js')(pluginOptions)],
    })
  ).process('@tailwind components; @tailwind utilities', {
    from: undefined,
  })
}

test('color are generated by default', async () => {
  return generatePluginCss(['text-clrs-navy'], {}).then((result) => {
    const { css } = result

    const total = css.match(/--clrs-[a-z]*[1-9]*/g)
    const tags = Array.from(new Set(total))
    const list = css.match(/\.[a-z]*-clrs-[a-z]*[1-9]*/g)

    expect(tags).toEqual(expect.arrayContaining(['--clrs-navy']))
    expect(list).toEqual(expect.arrayContaining(['.text-clrs-navy']))
  })
})

test('variant colors can be generated', () => {
  return generatePluginCss(['text-clrs-navy-a50', 'text-clrs-red-a50'], {
    variants: ['a50'],
  }).then((result) => {
    const { css } = result

    const total = css.match(/--clrs-[a-z]*[1-9]*(-a50)/g)
    const tags = Array.from(new Set(total))
    const list = css.match(/\.[a-z]*-clrs-[a-z]*[1-9]*(-a50)/g)
    const results = ['--clrs-navy-a50', '--clrs-red-a50']

    expect(tags).toEqual(expect.arrayContaining(results))
    expect(list).toEqual(expect.arrayContaining(['.text-clrs-navy-a50']))
  })
})

test('extra colors can be generated', () => {
  return generatePluginCss(['text-clrs-navy', 'text-clrs-white'], {
    extras: ['white'],
  }).then((result) => {
    const { css } = result

    const total = css.match(/--clrs-[a-z]*[1-9]*/g)
    const tags = Array.from(new Set(total))
    const list = css.match(/\.[a-z]*-clrs-[a-z]*[1-9]*/g)
    const results = ['--clrs-navy', '--clrs-white']

    expect(tags).toEqual(expect.arrayContaining(results))
    expect(list).toEqual(expect.arrayContaining(['.text-clrs-white']))
  })
})

test('base colors can be generated', () => {
  return generatePluginCss(['text-clrs-funky'], { names: ['funky'] }).then(
    (result) => {
      const { css } = result

      const total = css.match(/--clrs-[a-z]*[1-9]*/g)
      const tags = Array.from(new Set(total))
      const list = css.match(/\.[a-z]*-clrs-[a-z]*[1-9]*/g)
      const results = ['--clrs-funky']

      expect(tags).toEqual(expect.arrayContaining(results))
      expect(list).toEqual(expect.arrayContaining(['.text-clrs-funky']))
    }
  )
})

test('variants can skip colors', () => {
  return generatePluginCss(
    [
      'text-clrs-white',
      'text-clrs-white-a50',
      'text-clrs-navy',
      'text-clrs-navy-a50',
    ],
    {
      names: ['navy', 'white'],
      skip: ['white'],
      variants: ['a50'],
    }
  ).then((result) => {
    const { css } = result

    const total = css.match(/--clrs-[a-z]*[1-9]*(-a50)?/g)
    const tags = Array.from(new Set(total))
    const list = css.match(/\.[a-z]*-clrs-[a-z]*[1-9]*(-a50)?/g)
    const results = ['--clrs-white']

    expect(tags).toEqual(expect.arrayContaining(results))
    expect(list).toEqual(
      expect.arrayContaining([
        '.text-clrs-white',
        '.text-clrs-navy',
        '.text-clrs-navy-a50',
      ])
    )
    expect(list).not.toEqual(expect.arrayContaining(['.text-clrs-white-a50']))
  })
})

test('prefix can be changed', () => {
  return generatePluginCss(['text-ds1-navy', 'text-ds1-red'], {
    prefix: 'ds1',
  }).then((result) => {
    const { css } = result

    const total = css.match(/--ds1-[a-z]*[1-9]*(-a50)?/g)
    const tags = Array.from(new Set(total))
    const list = css.match(/\.[a-z]*-ds1-[a-z]*[1-9]*(-a50)?/g)
    const results = ['--ds1-navy', '--ds1-red']

    expect(tags).toEqual(expect.arrayContaining(results))
    expect(list).toEqual(expect.arrayContaining(['.text-ds1-navy']))
  })
})

test('try it all at once', () => {
  return generatePluginCss(
    [
      'text-ds1-primary',
      'text-ds1-secondary',
      'text-ds1-primary-light',
      'text-ds1-primary-dark',
    ],
    {
      prefix: 'ds1',
      names: ['primary'],
      extras: ['secondary'],
      skip: ['secondary'],
      variants: ['light', 'dark'],
    }
  ).then((result) => {
    const { css } = result

    const total = css.match(/--ds1-[a-z]*[1-9]*(-(?:light|dark))?/g)
    const tags = Array.from(new Set(total))
    const list = css.match(/\.[a-z]*-ds1-[a-z]*[1-9]*(-(?:light|dark))?/g)
    const results = [
      '--ds1-primary',
      '--ds1-secondary',
      '--ds1-primary-light',
      '--ds1-primary-dark',
    ]

    expect(tags).toEqual(expect.arrayContaining(results))
    expect(list).toEqual(
      expect.arrayContaining([
        '.text-ds1-primary-light',
        '.text-ds1-primary-dark',
      ])
    )
    expect(list).not.toEqual(
      expect.arrayContaining([
        '.text-ds1-secondary-light',
        '.text-ds1-secondary-dark',
      ])
    )
  })
})

test('map can define vars and default colors', () => {
  return generatePluginCss(['text-ds1-primary'], {
    prefix: 'ds1',
    map: {
      primary: '#ff0000',
    },
  }).then((result) => {
    const { css } = result

    const total = css.match(/--ds1-[a-z]*[1-9]*/g)
    const tags = Array.from(new Set(total))
    const list = css.match(/\.[a-z]*-ds1-[a-z]*[1-9]*/g)
    const results = ['--ds1-primary']

    expect(tags).toEqual(expect.arrayContaining(results))
    expect(list).toEqual(expect.arrayContaining(['.text-ds1-primary']))
  })
})

test('map can define vars and default colors with alphas', () => {
  return generatePluginCss(
    [
      'text-clrs-navy',
      'text-clrs-red-a50',
      'text-clrs-bada55',
      'text-clrs-bada55-a50',
    ],
    {
      map: {
        bada55: '#bada55',
        slate: '#708090',
        slate4: '#4e5964',
        white: '#ffffff',
      },
      alphas: [50],
    }
  ).then((result) => {
    const { css } = result

    const total = css.match(/--clrs-[a-z]*[1-9]*(-(?:a50))?/g)
    const tags = Array.from(new Set(total))
    const list = css.match(/\.[a-z]*-clrs-[a-z]*[1-9]*(-(?:a50))?/g)
    const results = ['--clrs-navy', '--clrs-bada55', '--clrs-bada55-a50']

    expect(tags).toEqual(expect.arrayContaining(results))
    expect(list).toEqual(
      expect.arrayContaining([
        '.text-clrs-red-a50',
        '.text-clrs-bada55',
        '.text-clrs-bada55-a50',
      ])
    )
  })
})
